// Code generated by MockGen. DO NOT EDIT.
// Source: login.go

// Package login is a generated GoMock package.
package login

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/shinya0226/kensyu/entity"
	usecase "github.com/shinya0226/kensyu/usecase"
)

// MockILoginUsecase is a mock of ILoginUsecase interface.
type MockILoginUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockILoginUsecaseMockRecorder
}

// MockILoginUsecaseMockRecorder is the mock recorder for MockILoginUsecase.
type MockILoginUsecaseMockRecorder struct {
	mock *MockILoginUsecase
}

// NewMockILoginUsecase creates a new mock instance.
func NewMockILoginUsecase(ctrl *gomock.Controller) *MockILoginUsecase {
	mock := &MockILoginUsecase{ctrl: ctrl}
	mock.recorder = &MockILoginUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginUsecase) EXPECT() *MockILoginUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockILoginUsecase) Login(e entity.User) (usecase.LoginFormat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", e)
	ret0, _ := ret[0].(usecase.LoginFormat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockILoginUsecaseMockRecorder) Login(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockILoginUsecase)(nil).Login), e)
}
